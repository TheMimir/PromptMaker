{
  "keywords": {
    "role": [
      "게임 기획자",
      "게임 프로그래머",
      "게임 아티스트",
      "QA 엔지니어",
      "데이터 분석가",
      "마케팅 전문가",
      "프로젝트 매니저",
      "UI/UX 디자이너"
    ],
    "goal": [
      "기능 분석",
      "시스템 설계",
      "버그 해결",
      "성능 최적화",
      "사용자 경험 개선",
      "밸런스 조정",
      "데이터 분석",
      "프로젝트 관리"
    ],
    "context": [
      "신규 기능 개발",
      "TestCase 제작 요청",
      "버그 수정",
      "밸런스 테스트",
      "A/B 테스트",
      "성능 개선",
      "사용자 피드백 반영",
      "리팩토링"
    ],
    "output": [
      "보고서",
      "TestCase",
      "분석 결과",
      "기획서",
      "코드",
      "문서",
      "프레젠테이션",
      "가이드라인"
    ],
    "rule": [
      "상세 분석 필수",
      "단계별 접근",
      "데이터 기반 결론",
      "실행 가능한 제안",
      "위험도 평가 포함",
      "명확한 근거 제시",
      "우선순위 명시",
      "타임라인 포함"
    ]
  },
  "rule_expansions": {
    "상세 분석 필수": "각 요소를 다음과 같이 상세히 분석하세요: 1) 현재 상황의 정량적 데이터 제시 (MAU, DAU, ARPU, 리텐션율 등), 2) 각 요소별 장단점을 구체적 근거와 함께 나열, 3) 예상되는 결과와 그 근거를 명시, 4) 최소 2-3가지 대안 옵션들과 비교 분석 포함. 모든 분석에는 구체적 게임 지표나 실제 수치 예시를 반드시 포함하세요.",
    "단계별 접근": "작업을 3-5단계로 세분화하고, 각 단계별로 다음을 명시하세요: 1) 구체적 목표와 성공 기준, 2) 세부 작업 내용과 담당자, 3) 예상 소요 시간 (일/주 단위), 4) 산출물과 deliverable, 5) 다음 단계로 넘어가기 위한 완료 조건과 검수 기준. 각 단계는 독립적으로 검증 가능하도록 구성하세요.",
    "데이터 기반 결론": "모든 결론과 제안에는 반드시 다음 데이터를 포함하세요: 1) 관련 게임 지표 (사용자 행동, 수익, 성능 지표), 2) 수치적 근거와 통계적 신뢰도, 3) 업계 평균 또는 경쟁사 대비 벤치마크, 4) A/B 테스트 결과나 실험 데이터. 추측이나 주관적 판단 대신 객관적이고 측정 가능한 데이터만을 근거로 사용하세요.",
    "실행 가능한 제안": "모든 제안은 즉시 실행할 수 있도록 다음 형태로 작성하세요: 1) 구체적 실행 방법과 단계별 action item, 2) 필요한 리소스 (인력, 예산, 도구), 3) 실행 일정과 마일스톤, 4) 성과 측정 방법과 KPI, 5) 실행 과정에서 예상되는 장애물과 대응 방안. 추상적 개념이 아닌 당장 시작할 수 있는 구체적 작업을 제시하세요.",
    "위험도 평가 포함": "각 제안과 결정에 대해 다음 위험 요소를 분석하세요: 1) 기술적 위험 (구현 복잡도, 성능 영향, 호환성), 2) 비즈니스 위험 (매출 영향, 사용자 이탈, 경쟁력), 3) 일정 위험 (지연 가능성, 의존성 문제), 4) 각 위험의 발생 확률과 영향도를 5단계로 평가, 5) 위험 완화 방안과 contingency plan. 모든 위험은 구체적 시나리오와 함께 제시하세요.",
    "명확한 근거 제시": "모든 주장과 결론에 대해 다음 근거를 명시하세요: 1) 1차 자료 출처 (게임 로그, 사용자 데이터, 시장 조사), 2) 참고한 업계 보고서나 연구 자료, 3) 전문가 의견이나 베스트 프랙티스, 4) 유사 사례나 precedent, 5) 가정이나 전제 조건의 명시. 모든 근거는 검증 가능하고 신뢰할 수 있는 출처를 기반으로 하세요.",
    "우선순위 명시": "모든 항목과 제안에 대해 우선순위를 다음 기준으로 분류하세요: 1) 높음 - 즉시 실행 필요 (비즈니스 임팩트 크고 긴급), 2) 중간 - 단기간 내 실행 (중요하지만 여유 있음), 3) 낮음 - 장기 계획 (nice-to-have), 4) 각 우선순위별 예상 ROI와 리소스 요구량, 5) 우선순위 결정 근거와 trade-off 분석. 우선순위는 비즈니스 가치와 실행 용이성을 모두 고려하여 결정하세요.",
    "타임라인 포함": "모든 계획과 제안에 구체적 일정을 포함하세요: 1) 전체 프로젝트 타임라인 (주/월 단위), 2) 주요 마일스톤과 deliverable 일정, 3) 각 단계별 소요 시간과 의존성 관계, 4) 리소스 투입 계획 (인력, 예산 배분), 5) 리스크 버퍼와 예비 일정, 6) 정기 검토 및 조정 포인트. 모든 일정은 현실적이고 달성 가능하도록 설정하세요."
  },
  "goal_expansions": {
    "기능 분석": "게임 기능을 다음 관점에서 체계적으로 분석하세요: 1) 사용률 데이터 (DAU 대비 기능 사용률, 평균 사용 빈도), 2) 사용자 만족도 (NPS, 리뷰 분석, 이탈률), 3) 비즈니스 영향도 (ARPU 기여도, 결제 전환율), 4) 기술적 성능 (응답속도, 메모리 사용량, 에러율). 각 지표별 현재 수치, 목표치, 개선 방안을 구체적으로 제시하세요.",
    "시스템 설계": "게임 시스템을 다음 단계로 설계하세요: 1) 요구사항 정의 (기능 명세, 성능 기준, 제약사항), 2) 아키텍처 설계 (컴포넌트 구조, 데이터 플로우, API 명세), 3) 확장성 고려 (동시접속자 증가, 콘텐츠 확장, 플랫폼 대응), 4) 위험 요소 식별 (병목점, 의존성, 장애 시나리오). 각 단계별 구체적 산출물과 검증 기준을 명시하세요.",
    "버그 해결": "버그를 체계적으로 해결하세요: 1) 재현 조건 확립 (단계별 재현 방법, 필요 환경, 발생 빈도), 2) 근본 원인 분석 (로그 분석, 코드 리뷰, 데이터 추적), 3) 수정 방안 설계 (임시 해결책과 근본 해결책, 사이드 이펙트 검토), 4) 검증 계획 (테스트케이스 작성, 회귀 테스트, 모니터링 방안). 우선순위와 예상 소요시간을 포함하세요.",
    "성능 최적화": "게임 성능을 다음 영역에서 최적화하세요: 1) 클라이언트 성능 (FPS, 로딩시간, 메모리 사용량, 배터리 소모), 2) 서버 성능 (응답시간, TPS, 동시접속 처리량), 3) 네트워크 최적화 (패킷 크기, 지연시간, 대역폭 사용량), 4) 데이터베이스 최적화 (쿼리 성능, 인덱싱, 캐싱 전략). 현재 지표, 목표 성능, 구체적 개선 방법을 제시하세요.",
    "사용자 경험 개선": "사용자 경험을 데이터 기반으로 개선하세요: 1) 사용자 여정 분석 (온보딩 완료율, 핵심 기능 도달률, 이탈 지점), 2) 인터페이스 개선 (UI/UX 사용성 테스트, A/B 테스트 결과, 접근성 검토), 3) 콘텐츠 만족도 (플레이 시간, 재방문율, 추천 점수), 4) 피드백 반영 (리뷰 분석, 서베이 결과, 고객지원 이슈). 개선 우선순위와 KPI를 명시하세요.",
    "밸런스 조정": "게임 밸런스를 다음 방법으로 조정하세요: 1) 현재 상태 분석 (승률 데이터, 사용률 통계, 메타 분포), 2) 문제점 식별 (OP/UP 요소, 다양성 부족, 진입장벽), 3) 조정 방안 설계 (수치 변경, 메커니즘 추가/제거, 새 콘텐츠 도입), 4) 영향도 예측 (플레이어 행동 변화, 경제 시스템 영향, 장기적 효과). 단계적 적용 계획과 모니터링 지표를 포함하세요.",
    "데이터 분석": "게임 데이터를 체계적으로 분석하세요: 1) 핵심 지표 추적 (DAU/MAU, LTV, ARPU, 리텐션율), 2) 사용자 행동 분석 (플레이패턴, 결제행동, 이탈요인), 3) 콘텐츠 성과 측정 (스테이지 클리어율, 아이템 사용률, 소셜 기능 참여도), 4) 예측 모델링 (매출 예측, 이탈 예측, LTV 산정). 분석 결과는 실행 가능한 인사이트와 개선 권고안으로 제시하세요.",
    "프로젝트 관리": "게임 프로젝트를 체계적으로 관리하세요: 1) 일정 관리 (마일스톤 설정, 크리티컬 패스 식별, 리소스 할당), 2) 품질 관리 (QA 프로세스, 버그 트래킹, 성능 기준), 3) 리스크 관리 (위험 요소 식별, 완화 계획, 비상 대응), 4) 커뮤니케이션 (진행 상황 공유, 이슈 에스컬레이션, 스테이크홀더 관리). 정량적 성과 지표와 보고서 형태를 명시하세요."
  },
  "context_expansions": {
    "신규 기능 개발": "신규 기능 개발 환경에서 작업하세요: 현재 프로토타입 단계이며, 3개월 내 출시 예정입니다. 기술적 제약사항으로 기존 시스템과의 호환성 유지가 필요하고, 예산 한계로 인해 외부 라이브러리 사용이 제한적입니다. 타겟 사용자는 기존 플레이어 70% + 신규 유입 30%이며, 핵심 성과지표는 기능 사용률 40% 이상, 사용자 만족도 4.0/5.0 이상입니다. 개발팀 5명, QA팀 2명이 투입되어 있습니다.",
    "TestCase 제작 요청": "TestCase 제작이 요구되는 상황입니다: 새로운 게임 시스템이 다음 주 QA 테스트 시작 예정이며, 자동화 테스트와 수동 테스트를 모두 커버해야 합니다. 테스트 환경은 iOS/Android/PC 멀티플랫폼이고, 동시접속자 1,000명 기준으로 부하 테스트가 필요합니다. 기존 기능과의 호환성, 보안 취약점, 성능 저하 없음을 검증해야 하며, 테스트 완료 후 상용 서비스 적용이 결정됩니다.",
    "버그 수정": "긴급 버그 수정이 필요한 상황입니다: 라이브 서비스에서 크리티컬 이슈가 발생하여 24시간 내 핫픽스 배포가 예정되어 있습니다. 영향 범위는 전체 사용자의 15%이며, 현재 CS 문의가 시간당 50건 증가하고 있습니다. 수정 작업 시 서비스 중단 시간은 최대 30분으로 제한되어 있고, 롤백 계획과 모니터링 체계가 준비되어 있어야 합니다. 개발팀장의 승인 후 즉시 적용됩니다.",
    "밸런스 테스트": "게임 밸런스 테스트를 진행하는 상황입니다: 신규 캐릭터 3개와 기존 캐릭터 10개 간의 상성 관계를 검증해야 합니다. 테스트 기간은 2주이며, 베타 테스터 500명이 참여합니다. 승률 데이터, 사용률 통계, 플레이 시간을 실시간 수집하고 있으며, 목표는 모든 캐릭터의 승률을 45-55% 구간에 유지하는 것입니다. 테스트 결과에 따라 스탯 조정 또는 스킬 개편을 결정합니다.",
    "A/B 테스트": "A/B 테스트를 실행하는 환경입니다: 신규 UI 디자인(A안)과 기존 UI(B안)를 비교 검증 중이며, 각각 5,000명의 사용자 그룹에게 노출되고 있습니다. 테스트 기간은 4주이고, 핵심 지표는 전환율, 체류시간, 이탈률입니다. 현재 1주차 데이터에서 A안이 전환율 8% 향상을 보이고 있으나, 통계적 유의성 확보를 위해 추가 데이터 수집이 필요합니다. 최종 결정은 95% 신뢰도 기준으로 이루어집니다.",
    "성능 개선": "성능 개선이 시급한 상황입니다: 최근 사용자 증가로 인해 서버 응답속도가 평균 2.5초로 저하되었고, 목표는 1.0초 이하로 단축하는 것입니다. 클라이언트 측에서는 로딩시간이 30초에서 15초로 개선되어야 하며, 메모리 사용량을 20% 절약해야 합니다. 인프라 예산은 월 30% 증액까지 가능하고, 코드 최적화와 아키텍처 개선을 병행해야 합니다. 개선 완료 후 성능 모니터링 시스템을 구축할 예정입니다.",
    "사용자 피드백 반영": "사용자 피드백 반영이 필요한 상황입니다: 최근 1개월간 수집된 피드백 1,200건 중 UI 개선 요청이 40%, 게임 밸런스 조정이 35%, 버그 신고가 25%를 차지합니다. 앱스토어 평점이 4.2에서 3.8로 하락했고, 긍정적 리뷰는 60%에서 45%로 감소했습니다. 우선순위는 비즈니스 임팩트와 개발 공수를 고려하여 결정하며, 다음 업데이트(6주 후)에 주요 개선사항을 반영할 예정입니다.",
    "리팩토링": "코드 리팩토링이 필요한 상황입니다: 2년간 축적된 레거시 코드로 인해 개발 속도가 30% 저하되었고, 버그 발생률이 증가하고 있습니다. 현재 코드 복잡도 지수가 8.5(목표: 6.0 이하)이며, 테스트 커버리지는 45%(목표: 80% 이상)입니다. 리팩토링 기간은 8주로 계획되어 있고, 기능 변경 없이 구조 개선에만 집중해야 합니다. 작업 중 서비스 안정성을 보장하기 위해 단계적 적용과 지속적 테스트가 필요합니다."
  },
  "categories": [
    "기획",
    "프로그램",
    "아트",
    "QA",
    "전체"
  ],
  "version": "2.2.0",
  "last_updated": "2025-01-18"
}